ООП

Упражнение 1. 
Создайте класс Point, экземпляры которого будут создаваться из координат x и y.


Упражнение 2. 
Создайте класс прямоугольник — Rectangle. Метод __init__ принимает две точки — левый нижний и правый верхний угол. Каждая точка представлена экземпляром класса Point. Реализуйте методы вычисления площади и периметра прямоугольника.


Упражнение 3. 
Добавьте в класс Rectangle метод contains. Метод принимает точку и возвращает True, если точка находится внутри прямоугольника и False в противном случае.


Упражнение 4. 
Описать класс десятичного счётчика. Он должен обладать внутренней переменной, хранящей текущее значение, методами повышения значения (increment) и понижения (decrement), получения текущего значения get_counter. Учесть, что счётчик не может опускаться ниже 0.


Упражнение 5. 
Создать класс для часов. Должна быть возможность установить время при создании объекта. Также необходимо реализовать методы, с помощью которых можно добавлять по одной минуте/секунде или по одному часу к текущему времени. Помнить, что значения минут и секунд не могут превышать 59, а часов 23.


Упражнение 6. 
Доработать предыдущую задачу, чтобы можно было складывать двое часов друг с другом. Для перегрузки оператора + использовать метод __add__(self, other).


Упражнение 7. 
Создать классы для травоядного животного и травы. Животное должно уметь поедать траву, если испытывает голод, в противном случае отказываться от лакомства. Трава должна обладать питательностью, в зависимости от которой животное будет насыщаться.


Упражнение 8 (Задача просто на классы, без обработки исключений).
Для одной задачи необходимо реализовать следующее - при соединении двух элементов получается новый. У нас есть 4 базовых элемента: Вода, Воздух, Огонь, Земля. Из них как раз и получаются новые: Шторм, Пар, Грязь, Молния, Пыль, Лава.
Вот таблица преобразований:
  Вода + Воздух = Шторм
  Вода + Огонь = Пар
  Вода + Земля = Грязь
  Воздух + Огонь = Молния
  Воздух + Земля = Пыль
  Огонь + Земля = Лава

Напишите программу, которая реализует все эти элементы. Каждый элемент необходимо организовать как отдельный класс. Если результат не определен - то возвращается None.
Примечание: сложение объектов можно реализовывать через магический метод add, вот пример использования:

class Example_1:
    def __add__(self, other):
        return Example_2()

class Example_2:
    answer = 'сложили два класса и вывели'

a = Example_1()
b = Example_2()
c = a + b
print(c.answer)

Дополнительно: придумайте свой элемент (или элементы), а также реализуйте его взаимодействие с остальными элементами


Исключения

Упражнение 9.
Программа написана верно, однако содержит места потенциальных ошибок.
найдите потенциальные источники ошибок (укажите номера строк в строке документации);
используя конструкцию try добавьте в код обработку соответствующих исключений.
class NoMoneyToWithdrawError(Exception):
   def __init__(self, message):
       super().__init__(message)

class PaymentError(Exception):
   def __init__(self, message):
       super().__init__(message)

def print_accounts(accounts):
   """Печать аккаунтов."""
   print("Список клиентов ({}): ".format(len(accounts)))
   for i, (name, value) in enumerate(accounts.items(), start=1):
       print("{}. {} {}".format(i, name, value))

def transfer_money(accounts, account_from, account_to, value):
   """Выполнить перевод 'value' денег со счета 'account_from' на 'account_to'.

   При переводе денежных средств необходимо учитывать:
       - хватает ли денег на счету, с которого осуществляется перевод;
       - перевод состоит из уменьшения баланса первого счета и увеличения
         баланса второго; если хотя бы на одном этапе происходит ошибка,
         аккаунты должны быть приведены в первоначальное состояние
         (механизм транзакции)
         см. https://ru.wikipedia.org/wiki/Транзакция_(информатика).

   Исключения (raise):
       - NoMoneyToWithdrawError: на счету 'account_from'
                                 не хватает денег для перевода;
       - PaymentError: ошибка при переводе.
   """
   # Удалите комментарий и допишите код

if __name__ == "__main__":
   accounts = {
       "Василий Иванов": 100,
       "Екатерина Белых": 1500,
       "Михаил Лермонтов": 400
   }
   print_accounts(accounts)

   payment_info = {
       "account_from": "Екатерина Белых",
       "account_to": "Василий Иванов"
   }

   print("Перевод от {account_from} для {account_to}...".
         format(**payment_info))

   payment_info["value"] = int(input("Сумма = "))

   transfer_money(accounts, **payment_info)

   print("OK!")

   print_accounts(accounts)


Упражнение 10.
Напишите программу, которая будет суммировать все числа, введенные пользователем, игнорируя при этом нечисловой ввод. Выводите на экран текущую сумму чисел после каждого очередного ввода. Ввод пользователем значения, не являющегося числовым, должен приводить к появлению соответствующего предупреждения, после чего пользователю должно быть предложено ввести следующее число. Выход из программы будет осуществляться путем пропуска ввода. Удостоверьтесь, что ваша программа корректно обрабатывает целочисленные значения и числа с плавающей запятой.


Упражнение 11.
Напишите программу, выполняющую перевод из буквенных оценок в числовые и обратно. Программа должна позволять пользователю вводить несколько значений для перевода – по одному в каждой строке. Для начала предпримите попытку сконвертировать введенное пользователем значение из числового в буквенное. Если возникнет исключение, попробуйте выполнить обратное преобразование – из буквенного в числовое. Если и эта попытка окончится неудачей, выведите предупреждение о том, что введенное значение не является допустимым. Пусть ваша программа конвертирует оценки до тех пор, пока пользователь не оставит ввод пустым. При решении данного задания вам поможет таблица перевода оценок


